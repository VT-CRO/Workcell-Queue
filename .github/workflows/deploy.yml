name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Optionally install node for local build steps (if needed)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Update as needed

      # Build Frontend (optional local build and then SCP to the server)
      # Alternatively, you can perform the build directly on your EC2
      - name: Install Frontend Dependencies & Build
        working-directory: frontend
        run: |
          npm install
          npm run build

      # Upload the frontend build and backend files to the server via scp/ rsync,
      # or run commands on the server to pull the GitHub repo.
      # Here, we assume remote commands on the EC2 to pull the latest code and build.
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # If your EC2 uses a non-standard port, uncomment and set below:
          # port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            set -e

            echo "Navigating to the project directory..."
            cd ~/Workcell-Queue

            echo "Pulling latest code..."
            git pull origin main

            echo "Updating environment variables..."
            
            cat <<EOF > ~/Workcell-Queue/frontend/.env
            VITE_BACKEND_URL=${{ secrets.BACKEND_URL }}
            EOF

            cat <<EOF > ~/Workcell-Queue/backend/.env
            PORT=3000
            DISCORD_GUILD_ID=${{ secrets.GUILD_ID }}
            DISCORD_CLIENT_ID=${{ secrets.CLIENT_ID }}
            DISCORD_CHANNEL_ID=${{ secrets.CHANNEL_ID }}
            DISCORD_BOT_TOKEN=${{ secrets.BOT_TOKEN }}
            DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}
            DISCORD_REDIRECT_URI=${{ secrets.REDIRECT_URI }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            DOCKER_MOUNT=${{ secrets.DOCKER_MOUNT }}
            FIREBASE_FILE=${{ secrets.FIREBASE_FILE }}
            EOF

            echo "Building frontend..."
            cd frontend
            npm install
            npm run build
            cd ..

            echo "Restarting backend..."
            cd backend
            npm install

            # If using pm2 (example):
            if pm2 describe backend > /dev/null 2>&1; then
              pm2 reload backend --update-env
            else
              pm2 start server.js --name backend --update-env
            fi

            echo "Deployment finished!"
